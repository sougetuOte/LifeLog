name: LifeLog テストヘルパー
description: LifeLog の開発とテストをサポートするためのプロンプト集
temperature: 0.7
---

# テストケース生成
指定されたファイルまたは関数に対するpytestテストケースを生成します。
正常系と異常系の両方のテストケースを含みます。

Context:
@currentFile
@models/base.py
@models/entry.py
@models/user.py

以下の観点を含む包括的なテストケースを生成します：
1. 基本機能のテスト
2. エッジケース（境界値）のテスト
3. エラー処理の検証
4. 入力値の検証
5. セキュリティ面の考慮

# データベーススキーマレビュー
データベーススキーマとモデルの分析と改善提案を行います。

Context:
@models/base.py
@database.py
@schema.sql

以下の観点で分析を行います：
1. テーブル間の関連性
2. インデックスの使用状況
3. データ型の適切性
4. 正規化の状態
5. パフォーマンスへの影響

# セキュリティレビュー
コードのセキュリティ脆弱性とベストプラクティスをレビューします。

Context:
@currentFile
@app.py
@models/user.py
@templates/login.html
@templates/register.html

以下の観点でチェックを行います：
1. SQLインジェクションの脆弱性
2. クロスサイトスクリプティング（XSS）の脆弱性
3. CSRF対策の状況
4. パスワード処理の安全性
5. セッション管理の適切性
6. 入力値の検証状況

# API ドキュメント生成
指定されたエンドポイントまたはモジュールのAPIドキュメントを生成します。

Context:
@currentFile
@app.py

以下の項目を含めます：
1. エンドポイントの説明
2. リクエスト/レスポンスの形式
3. 認証要件
4. エラーレスポンスの種類と形式
5. 使用例

# 国際化対応確認
国際化実装の確認と検証を行います。

Context:
@templates/
@static/

以下の観点で確認します：
1. テキストの外部化状況
2. 日付・時刻の形式
3. 数値のフォーマット
4. 文字エンコーディング
5. RTL（右から左への表示）対応の考慮

# パフォーマンス最適化チェック
コードのパフォーマンスに関する分析と改善提案を行います。

Context:
@currentFile
@app.py
@models/

以下の観点で確認します：
1. データベースクエリの最適化
2. N+1問題の有無
3. キャッシュの活用
4. 非同期処理の可能性
5. メモリ使用効率

# コーディング規約チェック
Pythonのコーディング規約（PEP 8）に基づくコードレビューを行います。

Context:
@currentFile

以下の観点でチェックします：
1. コードの可読性
2. 命名規則の遵守
3. インポートの整理
4. コメントの適切性
5. 関数/メソッドの長さ

# デプロイメントチェックリスト
デプロイ前の確認事項をチェックします。

Context:
@requirements.txt
@alembic.ini
@app.py

以下の項目を確認します：
1. 依存パッケージの確認
2. 環境変数の設定
3. データベースマイグレーション
4. ログ設定
5. バックアップ対策
6. セキュリティ設定

# エラーメッセージ生成
ユーザーフレンドリーなエラーメッセージを生成します。

Context:
@currentFile
@templates/

以下の要件を満たすメッセージを生成：
1. 明確で分かりやすい説明
2. 問題解決のための具体的なアクション
3. 技術的詳細の適切な表示
4. 多言語対応（日本語・英語）
5. エラーコードの整合性

# SQLクエリ最適化
SQLクエリの分析と最適化提案を行います。

Context:
@currentFile
@models/
@database.py

以下の観点で分析：
1. インデックスの適切な使用
2. 実行計画の確認
3. JOINの最適化
4. サブクエリの効率化
5. ページネーション処理の改善

# アクセシビリティチェック
Webインターフェースのアクセシビリティを確認します。

Context:
@templates/
@static/

以下の観点でチェック：
1. WAI-ARIAの適切な使用
2. キーボード操作の対応
3. 色のコントラスト
4. 代替テキストの提供
5. フォーカス管理
6. スクリーンリーダー対応

# ログ分析支援
アプリケーションログの分析と改善提案を行います。

Context:
@app.py
@currentFile

以下の項目を確認：
1. ログレベルの適切性
2. ログ出力の十分性
3. エラートレース情報
4. パフォーマンスメトリクス
5. セキュリティイベント
6. 監視項目の提案