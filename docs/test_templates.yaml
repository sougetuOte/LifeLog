# テスト関連のプロンプトテンプレート
# 使用方法：必要なプロンプトをコピーして使用してください

unit_test_template:
  task: "ユニットテストの作成・更新"
  target_path: "tests/"
  test_types:
    model_test:
      template: |
        def test_{model_name}_{method_name}():
            # Arrange
            # モデルインスタンスの作成
            # テストデータの準備

            # Act
            # テスト対象メソッドの実行

            # Assert
            # 結果の検証
      examples:
        - test_user_create
        - test_user_validate_password
        - test_entry_update

    validation_test:
      template: |
        @pytest.mark.parametrize("input_data,expected", [
            (valid_data, True),
            (invalid_data, False),
        ])
        def test_{model_name}_validation(input_data, expected):
            # Arrange
            # バリデーション対象の準備

            # Act
            # バリデーションの実行

            # Assert
            # 結果の検証
      examples:
        - test_user_password_validation
        - test_entry_title_validation

integration_test_template:
  task: "統合テストの作成・更新"
  target_path: "tests/"
  test_types:
    api_test:
      template: |
        def test_api_{endpoint_name}_{action}():
            # Arrange
            # テストデータの準備
            # 必要な依存関係の設定

            # Act
            # APIエンドポイントの呼び出し

            # Assert
            # レスポンスの検証
            # データベースの状態確認
      examples:
        - test_api_login_success
        - test_api_entry_create

    database_test:
      template: |
        def test_db_{operation_name}():
            # Arrange
            # テストデータの準備

            # Act
            # データベース操作の実行

            # Assert
            # 結果の検証
            # 関連データの整合性確認
      examples:
        - test_db_user_cascade_delete
        - test_db_entry_relationships

e2e_test_template:
  task: "E2Eテストの作成・更新"
  target_path: "tests/"
  test_types:
    user_flow_test:
      template: |
        def test_user_flow_{scenario_name}():
            # Arrange
            # ブラウザの設定
            # テストデータの準備

            # Act
            # ユーザーアクションの実行
            # 画面遷移の確認

            # Assert
            # 表示内容の検証
            # データの永続化確認
      examples:
        - test_user_flow_registration_login
        - test_user_flow_create_entry

    admin_flow_test:
      template: |
        def test_admin_flow_{scenario_name}():
            # Arrange
            # 管理者権限の設定
            # テストデータの準備

            # Act
            # 管理者アクションの実行

            # Assert
            # 結果の検証
            # 権限の確認
      examples:
        - test_admin_flow_user_management
        - test_admin_flow_entry_moderation

fixture_template:
  task: "テストフィクスチャの作成・更新"
  target_path: "tests/conftest.py"
  fixtures:
    database_fixture:
      template: |
        @pytest.fixture
        def {fixture_name}():
            # Setup
            # データベース接続の準備
            # テストデータの投入

            yield # テストの実行

            # Teardown
            # データベースのクリーンアップ
      examples:
        - test_db
        - test_user
        - test_entry

    auth_fixture:
      template: |
        @pytest.fixture
        def {fixture_name}():
            # Setup
            # 認証情報の準備
            # セッションの設定

            yield # テストの実行

            # Teardown
            # セッションのクリーンアップ
      examples:
        - logged_in_user
        - admin_user

coverage_template:
  task: "カバレッジレポートの設定・更新"
  target_path: "pytest.ini"
  settings: |
    [pytest]
    addopts = 
        --cov=app
        --cov=models
        --cov-report=term-missing
        --cov-report=html
    testpaths = tests
    python_files = test_*.py

  coverage_goals:
    model_layer: "90%以上"
    view_layer: "85%以上"
    controller_layer: "85%以上"
    overall: "85%以上"

  report_analysis: |
    # カバレッジレポートの分析方法
    1. 未カバーの行の特定
    2. 重要度の評価
    3. 改善計画の立案

test_organization_template:
  task: "テストの整理・構造化"
  directory_structure: |
    tests/
    ├── __init__.py
    ├── conftest.py          # 共通フィクスチャ
    ├── unit/               # ユニットテスト
    │   ├── test_models.py
    │   └── test_utils.py
    ├── integration/        # 統合テスト
    │   ├── test_api.py
    │   └── test_db.py
    └── e2e/               # E2Eテスト
        ├── test_user_flows.py
        └── test_admin_flows.py

  naming_conventions: |
    # テストファイル名: test_*.py
    # テスト関数名: test_{対象}_{シナリオ}
    # フィクスチャ名: {スコープ}_{目的}

  documentation: |
    # 各テストファイルの構造
    1. 必要なインポート
    2. フィクスチャの定義
    3. テストケースの実装
    4. ヘルパー関数の定義

# 使用方法
# 1. 必要なテンプレートをコピー
# 2. プレースホルダーを実際の値に置換
# 3. テストケースを実装
# 4. カバレッジを確認して改善

# 注意事項
# - テストの独立性を保つ
# - 適切なアサーションを使用
# - テストデータは明示的に準備
# - クリーンアップを確実に実行
